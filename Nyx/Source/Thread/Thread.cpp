/********************************************************************************
*
*  The MIT License
*
* Copyright (c)2010 -  t.hayamizu
*
*以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェ
*アを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/ま
*たは販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。
*
*上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。
*
*ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目*的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法
*行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請
*求、損害、その他の義務について何らの責任も負わないものとします。 
********************************************************************************/
#include "PCH/PCH.h"
#include "Thread/Thread.h"
#include "Thread/detail/Win32/Win32Thread.h"

namespace nyx {
	struct thread::PImpl
	{
			PImpl(void * fp,  void* param, uint64_t stackSize, uint64_t flag)
				:thread(new win32_thread(fp, param, stackSize, flag))
			{}
			std::unique_ptr<win32_thread> thread;
	};

	//-----------------------------------------------------------------------------
	// コンストラクタ
	thread::thread(void * fp,  void* param, uint64_t stackSize, uint64_t flag) 
		:pimpl_(new PImpl(fp, param, stackSize, flag))
	{
	}


	//-----------------------------------------------------------------------------
	// デストラクタ
	thread::~thread() {
	}

	//-----------------------------------------------------------------------------
	// スレッドのレジューム
	uint64_t thread::resume() {
		return pimpl_->thread->resume();
	}

	//-----------------------------------------------------------------------------
	// スレッドのサスペンド
	uint64_t thread::suspend() {
		return pimpl_->thread->suspend();
	}

	//-----------------------------------------------------------------------------
	// IDの取得
	uint64_t thread::get_thread_id() {
		return pimpl_->thread->get_id();
	}

	//-----------------------------------------------------------------------------
	// 優先順位の取得
	int thread::get_priority() { 
		return pimpl_->thread->get_priority();
	}

	//-----------------------------------------------------------------------------
	// 優先順位の設定
	void thread::set_priority(uint32_t priority) { 
		return pimpl_->thread->set_priority(priority);
	}

	//-----------------------------------------------------------------------------
	// 終了の待機
	bool thread::join(uint64_t millisecond) {
		return pimpl_->thread->join(millisecond);
	}

	//-----------------------------------------------------------------------------
	// 終了コードの取得
	uint64_t thread::get_exit_code() { 
		return pimpl_->thread->get_exit_code();
	}

	//-----------------------------------------------------------------------------
	// ハンドルの取得
	thread_handle thread::get_handle() {
		return pimpl_->thread->get_handle();
	}

	//-----------------------------------------------------------------------------
	// スリープ
	void thread::sleep(uint64_t time) {
		using nyx::win32_thread;
		::Sleep(time);	
	}   

}