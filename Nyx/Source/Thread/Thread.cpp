/********************************************************************************
*
*  The MIT License
*
* Copyright (c)2010 -  t.hayamizu
*
*以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェ
*アを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/ま
*たは販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。
*
*上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。
*
*ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目*的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法
*行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請
*求、損害、その他の義務について何らの責任も負わないものとします。 
********************************************************************************/
#include "PCH/PCH.h"
#include "Thread/Thread.h"
#include "Thread/detail/Win32/Win32Thread.h"

namespace Nyx {
	struct Thread::PImpl
	{
			PImpl(void * fp,  void* param, ulong stackSize, ulong flag)
				:thread(new Win32Thread(fp, param, stackSize, flag))
			{}
			std::unique_ptr<Win32Thread> thread;
	};

	//-----------------------------------------------------------------------------
	// コンストラクタ
	Thread::Thread(void * fp,  void* param, ulong stackSize, ulong flag) 
		:pimpl_(new PImpl(fp, param, stackSize, flag))
	{
	}


	//-----------------------------------------------------------------------------
	// デストラクタ
	Thread::~Thread() {
	}

	//-----------------------------------------------------------------------------
	// スレッドのレジューム
	ulong Thread::Resume() {
		return pimpl_->thread->Resume();
	}

	//-----------------------------------------------------------------------------
	// スレッドのサスペンド
	ulong Thread::Suspend() {
		return pimpl_->thread->Suspend();
	}

	//-----------------------------------------------------------------------------
	// IDの取得
	ulong Thread::GetID() {
		return pimpl_->thread->GetID();
	}

	//-----------------------------------------------------------------------------
	// 優先順位の取得
	int Thread::GetPriority() { 
		return pimpl_->thread->GetPriority();
	}

	//-----------------------------------------------------------------------------
	// 優先順位の設定
	void Thread::SetPriority(int priority) { 
		return pimpl_->thread->SetPriority(priority);
	}

	//-----------------------------------------------------------------------------
	// 終了の待機
	bool Thread::Join(ulong millisecond) {
		return pimpl_->thread->Join(millisecond);
	}

	//-----------------------------------------------------------------------------
	// 終了コードの取得
	ulong Thread::GetExitCode() { 
		return pimpl_->thread->GetExitCode();
	}

	//-----------------------------------------------------------------------------
	// ハンドルの取得
	HANDLE Thread::GetHandle() {
		return pimpl_->thread->GetHandle();
	}

	//-----------------------------------------------------------------------------
	// スリープ
	void Thread::Sleep(ulong time) {
		using Nyx::Win32Thread;
		::Sleep(time);
		
	}   

}