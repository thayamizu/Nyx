/********************************************************************************
*
*  The MIT License
*
* Copyright (c)2010 -  t.hayamizu
*
*以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェ
*アを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/ま
*たは販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。
*
*上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。
*
*ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目*的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法
*行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請
*求、損害、その他の義務について何らの責任も負わないものとします。 
********************************************************************************/
#ifndef NYX_CORE_INCLUDED_PERFORMANCE_TIMER_H_
#define NYX_CORE_INCLUDED_PERFORMANCE_TIMER_H_
#include "Utility/NonCopyable.h"
namespace Nyx {
#ifdef _WIN32
	/// 時間間隔
	typedef ::LARGE_INTEGER Tick;
#endif

	///高精度タイマー
	//主にパフォーマンスチェックに使用するとよい
	class PerformanceTimer: private NonCopyable {
	public:
		//------------------------------------------------------------------------
		//　公開メンバ変数
		//------------------------------------------------------------------------
		static double Frequency;///<  CPUのクロック周波数
		static bool Initialized;///< 初期化フラグ

		//------------------------------------------------------------------------
		//　コンストラクタ・デストラクタ
		//------------------------------------------------------------------------
		/**
		* コンストラクタ
		*/
		PerformanceTimer();
		/**
		* デストラクタ
		*/
		~PerformanceTimer();

		//------------------------------------------------------------------------
		//　初期化
		//------------------------------------------------------------------------
		/**
		* 高精度タイマーの初期化
		* @return bool 初期化に成功すればtrue
		*/
		bool Initialize();

		//------------------------------------------------------------------------
		//　時間の取得
		//------------------------------------------------------------------------
		/**
		* 現在の時刻を取得します
		* @return Tick 時刻
		*/
		Tick GetTick();

		/**
		* 現在の時刻と以前の時刻の間隔を取ります
		* @param const Tick& 以前の時刻
		* @return double 時刻の差分
		*/
		double GetInterval(const Tick& previous);

		/**
		* 指定した時刻の間の間隔を取ります
		* @param const Tick & previous
		* @param const Tick & after
		* @return double 指定した時刻間の差分
		*/ 
		double GetInterval(const Tick& previous, const Tick & after);
	};

}

#endif