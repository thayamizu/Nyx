/********************************************************************************
*
*  The MIT License
*
* Copyright (c)2010 -  t.hayamizu
*
*以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェ
*アを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/ま
*たは販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。
*
*上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。
*
*ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目*的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法
*行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請
*求、損害、その他の義務について何らの責任も負わないものとします。 
********************************************************************************/
#include "PCH/PCH.h"
#include "Debug/Assert.h"
#include "Debug/DebugOutput.h"
#include "DirectSoundStereoAudioBuffer.h"

namespace Nyx {
	//-------------------------------------------------------------------------------------------------------
	//
	DirectSoundStereoAudioBuffer::DirectSoundStereoAudioBuffer() 
		: DirectSoundAudioBuffer(), IStereoAudioBuffer() {

	}


	//-------------------------------------------------------------------------------------------------------
	//
	DirectSoundStereoAudioBuffer::~DirectSoundStereoAudioBuffer() {

	}


	//-------------------------------------------------------------------------------------------------------
	//
	long DirectSoundStereoAudioBuffer::GetPan() const {
		auto soundBuffer = GetHandle();
		long pan;
		HRESULT hr = soundBuffer->GetPan(&pan);
		if (FAILED(hr)) {
			DebugOutput::Trace("DirectSoundオーディオバッファのパン値の取得に失敗しました。[%s:%d]", __FILE__, __LINE__);
			throw COMException("DirectSoundオーディオバッファのパン値の取得に失敗しました。", hr);
		}
		auto volume = AudioUtility::DecibelToVolume((pan > 0) ? - pan : pan);
		return (pan > 0)? 100L - volume : volume - 100L;
	}


	//-------------------------------------------------------------------------------------------------------
	//
	void DirectSoundStereoAudioBuffer::SetPan(long volume) {
		auto soundBuffer = GetHandle();
		Assert(soundBuffer != nullptr);
		const auto ref = 100L;
		volume = Math::Clamp(volume, -100L, 100L);
		auto pan = AudioUtility::VolumeToDecibel(ref - Math::Abs(volume));
		pan = (volume > 0)? pan : -pan;
		HRESULT hr = soundBuffer->SetPan(pan);
		if (FAILED(hr)) {
			DebugOutput::Trace("DirectSoundオーディオバッファのパン値の設定に失敗しました。[%s:%d]", __FILE__, __LINE__);
			throw COMException("DirectSoundオーディオバッファのパン値の設定に失敗しました。", hr);
		}
	}
}