/********************************************************************************
*
*  The MIT License
*
* Copyright (c)2010 -  t.hayamizu
*
*以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェ
*アを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/ま
*たは販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。
*
*上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。
*
*ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目*的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法
*行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請
*求、損害、その他の義務について何らの責任も負わないものとします。 
********************************************************************************/
#ifndef NYX_CORE_INCLUDED_RANDOM_H_
#define NYX_CORE_INCLUDED_RANDOM_H_

namespace Nyx {
	/// Mersenne Twister法による乱数生成
	DEPRECATED class Random {
	public:
		/* Period parameters */  
		static const uint N = (624);
		static const uint M = (397);
		static const ulong MatrixA   = (0x9908b0dfUL);   /* constant vector a */
		static const ulong UpperMask = (0x80000000UL);  /* most significant w-r bits */
		static const ulong LowerMask = (0x7fffffffUL);  /* least significant r bits */

		//------------------------------------------------------------------------
		//　構築・破壊
		//------------------------------------------------------------------------
		/**
		*コンストラクタ
		*/
		Random() : mti(624+1) {}

		//------------------------------------------------------------------------
		//　初期化
		//------------------------------------------------------------------------
		/**
		* 整数による乱数の初期化
		* @param ulong 整数
		*/
		void Init(ulong s);

		/**
		* 整数の列による乱数の初期化
		* @param ulong 整数列
		* @param int 整数列の長さ
		*/
		void Init(ulong init_key[], int key_length);

		/**
		* 文字列による乱数の初期化
		* @param std::wstring 初期化文字列
		*/
		void Init(std::wstring s);

		//------------------------------------------------------------------------
		//　乱数生成
		//------------------------------------------------------------------------
		/**
		* [0,0xffffffff]の範囲で乱数を生成
		* @return ulong 乱数
		*/
		ulong Int32(void);

		/**
		* [0,0x7fffffff]の範囲で乱数を生成
		* @return long 乱数
		*/
		long Int31(void);

		/**
		* [0,1]までの範囲で乱数を生成
		* @return double 乱数
		*/
		double Real1(void);

		/**
		* [0,1)までの範囲で乱数を生成
		* @return double 乱数
		*/
		double Real2(void);


		/**
		* (0,1)の範囲で乱数を生成
		* @return 乱数
		*/double Real3(void);

		/**
		* [0,1) 53ビット精度
		*/double Res53(void);
	private:
		ulong mt[N];///< 乱数列
		int mti;    ///< シード 
	};
}
#endif
