/********************************************************************************
*
*  The MIT License
*
* Copyright (c)2010 -  t.hayamizu
*
*以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェ
*アを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/ま
*たは販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。
*
*上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。
*
*ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目*的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法
*行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請
*求、損害、その他の義務について何らの責任も負わないものとします。 
********************************************************************************/
#ifndef NYX_CORE_INCLUDED_VECTOR2_H_
#define NYX_CORE_INCLUDED_VECTOR2_H_


namespace Nyx
{
	class Vector2 {
	public:
		//--------------------------------------------------------------------------------------
		// メンバ変数
		//--------------------------------------------------------------------------------------
		union {
			struct {
				float x; ///< X成分
				float y; ///< Y成分
			};

			float element[2];
		};

		//--------------------------------------------------------------------------------------
		// メンバ定数
		//--------------------------------------------------------------------------------------
		static const Vector2 Zero;  ///< ゼロベクトル

		static const Vector2 UnitX; ///< X軸単位ベクトル

		static const Vector2 UnitY; ///< Y軸単位ベクトル

		static const Vector2 ScaleUnit; ///< スケール単位ベクトル


		//--------------------------------------------------------------------------------------
		// コンストラクタ・デストラクタ
		//--------------------------------------------------------------------------------------

		/**
		* デフォルトコンストラクタ
		*/
		Vector2();

		/**
		* コンストラクタ
		* @param x
		* @param y
		*/
		Vector2(float x, float y);

		/**
		* コピーコンストラクタ
		* @param Vector2
		*/
		Vector2(const Vector2 & u);

		/** 
		* デストラクタ
		*/
		~Vector2();
		//--------------------------------------------------------------------------------------
		// 値の設定
		//--------------------------------------------------------------------------------------
		/**
		* 値の設定
		*/
		void Set(float x_, float y_);

		//--------------------------------------------------------------------------------------
		// 演算
		//--------------------------------------------------------------------------------------
		/** 
		* ベクトル加算
		* @param 右辺値 
		* @return 加算結果
		*/
		Vector2 operator +(const Vector2& rhs) const ;

		/** 
		* ベクトル減算
		* @param 右辺値 
		* @return 減算結果
		*/ 
		Vector2 operator -(const Vector2& rhs) const;

		/** 
		* ベクトル乗算
		* @param 右辺値 
		* @return 乗算結果
		*/
		Vector2 operator *(const float rhs) const;

		/** 
		* ベクトル乗算
		* @param 右辺値 
		* @return 乗算結果
		*/
		Vector2 operator *(const Vector2& rhs) const;

		/** 
		* ベクトル除算
		* @param 右辺値 
		* @return 除算結果
		*/
		Vector2 operator /(const float rhs) const;

		//--------------------------------------------------------------------------------------
		// 代入演算
		//--------------------------------------------------------------------------------------
		/** 
		* ベクトル加算
		* @param 右辺値 
		* @return 加算結果
		*/
		Vector2 & operator +=(const Vector2& rhs);
		/** 
		* ベクトル減算
		* @param 右辺値 
		* @return 減算結果
		*/                                                                             
		Vector2 & operator -=(const Vector2& rhs);

		/** 
		* ベクトル乗算
		* @param 右辺値 
		* @return 乗算結果
		*/
		Vector2 &  operator *=(const float rhs);

		/** 
		* ベクトル乗算
		* @param 右辺値 
		* @return 乗算結果
		*/
		Vector2 &  operator *=(const Vector2& rhs);

		/** 
		* ベクトル除算
		* @param 右辺値 
		* @return 除算結果
		*/
		Vector2 & operator /=(const float rhs);

		/** 
		* ベクトル反転
		* @param 右辺値 
		* @return 反転されたベクトル
		*/
		Vector2 operator ~();

		/** 
		* ベクトル代入
		* @param 右辺値 
		* @return 代入されたベクトル
		*/
		Vector2& operator =(const Vector2 &rhs);


		//--------------------------------------------------------------------------------------
		// ベクトル演算
		//--------------------------------------------------------------------------------------
		/**
		* ドット積（内積）
		* @param 右辺値
		* @return 内積
		*/
		float Dot(const Vector2& rhs);

		/**
		* ベクトルの長さ
		* @return ベクトルの長さの平方根
		*/
		float Length();

		/**
		* ベクトルの長さの平方根
		* @return ベクトルの長さの平方根
		*/
		float SquaredLength();

		/**
		* ベクトルを正規化
		*/
		inline void Normalize();

		/**
		* ベクトルを反転
		*/
		inline void Inverse();

		inline Vector2 Lerp(const Vector2& v1, const Vector2& v2, float s); 
		//--------------------------------------------------------------------------------------
		// 論理演算
		//--------------------------------------------------------------------------------------
		/** 
		* @return ゼロベクトルならtrue
		*/
		bool IsZero() const;

		/** 
		* @return 単位ベクトルならtrue
		*/
		bool IsUnit() const;

		/** 
		* ベクトルの等価演算
		* @param 右辺値 
		* @return 比較結果が等しいならばtrue
		*/
		bool operator ==(const Vector2& rhs) const;

		/** 
		* ベクトルの等価演算
		* 丸め誤差対策
		* @param 右辺値 
		* @return 比較結果が等しいならばtrue
		*/
		bool Equal(const Vector2& rhs) const;    
		/** 
		* ベクトル等価演算
		* @param 右辺値 
		* @return　比較結果が等しくないならばtrue
		*/
		bool operator !=(const Vector2& rhs) const;
	};

}
#endif
//VECTOR_H
