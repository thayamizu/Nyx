/********************************************************************************
*
*  The MIT License
*
* Copyright (c)2010 -  t.hayamizu
*
*以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェ
*アを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/ま
*たは販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。
*
*上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。
*
*ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目*的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法
*行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請
*求、損害、その他の義務について何らの責任も負わないものとします。 
********************************************************************************/
#ifndef NYX_CORE_INCLUDED_VECTOR3_H_
#define NYX_CORE_INCLUDED_VECTOR3_H_

namespace Nyx
{
	class Vector3 {
	public:
		//--------------------------------------------------------------------------------------
		// メンバ変数
		//--------------------------------------------------------------------------------------
		/// メンバ変数
		union {
			struct {
				/// x値
				float  x;
				/// y値
				float  y;
				/// z値
				float z;
			};
			/// 配列
			float elements[3];
		};

		//--------------------------------------------------------------------------------------
		// メンバ定数
		//--------------------------------------------------------------------------------------
		static const Vector3 Zero;  ///< ゼロベクトル

		static const Vector3 UnitX; ///< X軸単位ベクトル

		static const Vector3 UnitY; ///< Y軸単位ベクトル

		static const Vector3 UnitZ; ///< Z軸単位ベクトル

		static const Vector3 ScaleUnit; ///< スケール単位ベクトル 

		//--------------------------------------------------------------------------------------
		// コンストラクタ・デストラクタ
		//--------------------------------------------------------------------------------------
		/**
		*デフォルトコンストラクタ
		*/
		Vector3();

		/**
		* 引数つきコンストラクタ
		* @param x
		* @param y
		* @param z
		*/
		Vector3(float x_, float y_, float z_);

		/**
		* コピーコンストラクタ
		* @param Vector3
		*/
		Vector3(const Vector3 & u);

		/**
		* デストラクタ
		*/
		~Vector3();
		//--------------------------------------------------------------------------------------
		// 値の設定
		//--------------------------------------------------------------------------------------
		/**
		* 値の設定
		*/
		void Set(float x_, float y_, float z_);

		//--------------------------------------------------------------------------------------
		// 演算
		//--------------------------------------------------------------------------------------
		/**
		* 加算
		* @param 右辺値  
		* @return　加算結果 
		*/
		Vector3 operator +(const Vector3& u) const;

		/**
		* 減算
		* @param　右辺値  
		* @return 減算結果
		*/
		Vector3 operator -(const Vector3& u) const;

		/**
		* 乗算
		* @param 右辺値 
		* @return 乗算結果
		*/
		Vector3 operator *(const float u) const;

		/**
		* 乗算
		* @param  右辺値
		* @return 乗算結果 
		*/
		friend Vector3 operator *(const float u, const Vector3& v);

		/**
		* 除算
		* @param 右辺値  
		* @return 除算結果
		*/
		Vector3 operator /(const float u) const;

		//--------------------------------------------------------------------------------------
		// 代入演算
		//--------------------------------------------------------------------------------------
		/**
		* 加算代入
		* @param  右辺値
		* @return 加算結果
		*/
		Vector3& operator +=(const Vector3& u);

		/**
		* 減算代入
		* @param  右辺値
		* @return 減算結果
		*/
		Vector3& operator -=(const Vector3& u);

		/**
		* 乗算代入
		* @param  右辺値
		* @return 乗算結果
		*/
		Vector3& operator *=(const float u);

		/**
		* 除算代入
		* @param  右辺値
		* @return 除算結果
		*/
		Vector3& operator /=(const float u);

		/**
		* 代入
		* @param 右辺値
		* @return 代入結果
		*/
		Vector3& operator =(Vector3& u);

		/**
		* 反転 
		* @param 反転結果
		*/
		Vector3& operator ~();

		//--------------------------------------------------------------------------------------
		// ベクトル演算
		//--------------------------------------------------------------------------------------
		/**
		* ドット積
		* @param 右辺値
		* @return float 内積
		*/
		float Dot(Vector3& u);

		/**
		* クロス積
		* @param   右辺値
		* @return　Vector3 クロス積 
		*/
		Vector3 Cross(Vector3& u);

		/**
		* ベクトルの長さ
		* @return  float 長さ
		*/
		float Length();

		/**
		* ベクトルの長さの二乗値
		* @return  float 長さ
		*/
		float SquaredLength();

		/**
		* ベクトルの正規化
		*/
		void Normalize();

		/**
		* ベクトルの反転
		*/
		void Inverse();

		/**
		* 線形補間
		* @param const Vector3& 始点ベクトル
		* @param const Vector3& 終点ベクトル
		* @param float 補間係数
		*/
		Vector3 Lerp(const Vector3& v1, const Vector3& v2, float s);

		//--------------------------------------------------------------------------------------
		// 論理演算
		//--------------------------------------------------------------------------------------
		/** 
		* @return ゼロベクトルならtrue
		*/
		bool IsZero() const;

		/** 
		* @return 単位ベクトルならtrue
		*/
		bool IsUnit() const;

		/** 
		* ベクトルの等価演算
		* @param 右辺値 
		* @return 比較結果が等しいならばtrue
		*/
		bool operator ==(const Vector3& u) const;

		/** 
		* ベクトルの等価演算
		* 丸め誤差対策
		* @param 右辺値 
		* @return 比較結果が等しいならばtrue
		*/
		bool Equal(const Vector3& u) const;    
		/** 
		* ベクトル等価演算
		* @param 右辺値 
		* @return　比較結果が等しくないならばtrue
		*/
		bool operator !=(const Vector3& u) const;
	};

	typedef Vector3 Vector3f;
}


#endif