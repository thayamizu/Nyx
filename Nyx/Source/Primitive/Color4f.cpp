/********************************************************************************
*
*  The MIT License
*
* Copyright (c)2010 -  t.hayamizu
*
*以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェ
*アを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/ま
*たは販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。
*
*上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。
*
*ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目*的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法
*行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請
*求、損害、その他の義務について何らの責任も負わないものとします。 
********************************************************************************/
#include "PCH/PCH.h"
#include "Primitive/Color4f.h"

namespace Nyx
{

	const Color4f Color4f::White(1.f , 1.f, 1.f, 1.f);

	///
	const Color4f Color4f::Gray(0.5f, 0.5f, 0.5f, 1.f);

	///
	const Color4f Color4f::Black(0, 0, 0, 1.f);

	///
	const Color4f Color4f::Red(1.f, 0, 0, 1.f);

	///
	const Color4f Color4f::Green(0, 1.f, 0, 1.f);

	///
	const Color4f Color4f::Blue(0, 0, 1.f, 1.f);

	///
	const Color4f Color4f::Cyan(0, 1.f, 1.f, 1.f);

	///
	const Color4f Color4f::Magenta(1.f, 0, 1.f, 1.f);

	///
	const Color4f Color4f::Yellow(1.f, 1.f, 0, 1.f);

	//--------------------------------------------------------------------------------------
	//
	//
	Color4f::Color4f()
		:r(0), g(0), b(0),a(0)
	{
	}
	//--------------------------------------------------------------------------------------
	//
	//
	Color4f::Color4f(float red, float green, float blue, float alpha)
		: r(red),g(green),b(blue),a(alpha) 
	{
	}

	//--------------------------------------------------------------------------------------
	//
	//
	Color4f::Color4f(const Color4f& color) {
		r = color.r;
		g = color.g;
		b = color.b;
		a = color.a;
	}
	Color4f::~Color4f() {

	}

	//--------------------------------------------------------------------------------------
	//
	//
	Color4f Color4f::operator +(const Color4f& color) const {
		return Color4f(r + color.r, g + color.g, b + color.b, a + color.a);
	}

	//--------------------------------------------------------------------------------------
	//
	//
	Color4f Color4f::operator -(const Color4f& color) const {
		return Color4f(r - color.r, g - color.g, b - color.b, a - color.a);

	}

	//--------------------------------------------------------------------------------------
	//
	//
	Color4f Color4f::operator *(const float value) const {
		return Color4f(r * value, g * value, b * value, a * value);

	}

	//--------------------------------------------------------------------------------------
	//
	//
	Color4f Color4f::operator /(const float value)  const {
		return Color4f(r / value, g / value, b / value, a / value);

	}


	//--------------------------------------------------------------------------------------
	//
	//
	Color4f& Color4f::operator +=(const Color4f& color) {
		r += color.r;
		g += color.g;
		b += color.b;
		a += color.a;
		return *this;
	}

	//--------------------------------------------------------------------------------------
	//
	//
	Color4f& Color4f::operator -=(const Color4f& color) {
		r -= color.r;
		g -= color.g;
		b -= color.b;
		a -= color.a;

		return *this;
	}

	//--------------------------------------------------------------------------------------
	//
	//
	Color4f& Color4f::operator *=(const float value) {
		r *= value;
		g *= value;
		b *= value;
		a *= value;
		return *this;
	}
	//--------------------------------------------------------------------------------------
	//
	//
	Color4f& Color4f::operator /=(const float value) {
		r /= value;
		g /= value;
		b /= value;
		a /= value;
		return *this;
	}

	//--------------------------------------------------------------------------------------
	//
	//
	bool Color4f::operator ==(const Color4f& color) {
		return (
			Math::Abs(r - color.r) <= Math::Epsilon &&
			Math::Abs(g - color.g) <= Math::Epsilon &&
			Math::Abs(b - color.b) <= Math::Epsilon &&
			Math::Abs(a - color.a) <= Math::Epsilon);

	}

	//--------------------------------------------------------------------------------------
	//
	//
	bool Color4f::operator !=(const Color4f& color) {
		return ! (*this == color);
	}

}