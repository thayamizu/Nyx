/********************************************************************************
*
*  The MIT License
*
* Copyright (c)2010 -  t.hayamizu
*
*以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェ
*アを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/ま
*たは販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。
*
*上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。
*
*ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目*的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法
*行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請
*求、損害、その他の義務について何らの責任も負わないものとします。 
********************************************************************************/

#include "PCH/PCH.h"
#include "Debug/DebugOutput.h"
#include <iostream>

using nyx::logger;
namespace nyx {
	static void trace_log(char* string) {
		debug_out::get_logger()->printfln(string);
	}

	static void trace_console(char* string) {
		::OutputDebugStringA(string);
		::OutputDebugStringA("\n");
	}

	static void trace_stderr(char* string) {
		std::cout << string << std::endl;
	}

	//----------------------------------------------------------------------------------------------
	//
	DEBUG_OUTPUT_MODE debug_out::outputMode_ = DEBUG_OUTPUT_MODE::DEBUG_OUTPUT_MODE_STDOUT;
	logger* debug_out::logger_ = NULL;

	//----------------------------------------------------------------------------------------------
	//
	logger* debug_out::get_logger() {
		if (logger_ == NULL) {
			logger_ = new logger(L"NyxDebugOut.txt");
		}
		return logger_;
	}

	//----------------------------------------------------------------------------------------------
	//
	void debug_out::trace(char* format, ...) {
		va_list list;
		va_start(list, format);
		static const int length = 1024;
		static char buffer[length];
		vsprintf_s(buffer, length, format, list);
		va_end(list);

		switch(outputMode_) {
		case DEBUG_OUTPUT_MODE::DEBUG_OUTPUT_MODE_STDOUT:
			trace_stderr(buffer);
			break;
		case DEBUG_OUTPUT_MODE::DEBUG_OUTPUT_MODE_CONSOLE:
			trace_console(buffer);
			break;
		case DEBUG_OUTPUT_MODE::DEBUG_OUTPUT_MODE_FILE:
			trace_log(buffer);
			break;
		}
	}

	//----------------------------------------------------------------------------------------------
	//
	void debug_out::set_output_mode(DEBUG_OUTPUT_MODE mode) {
		outputMode_ =  mode;
	}

	//----------------------------------------------------------------------------------------------
	//
	void debug_out::debug_messagebox(char* format, ...) {
		va_list list;
		va_start(list, format);
		static const int length = 1024;
		static char tmp[length];
		vsprintf_s(tmp, length, format, list);
		::MessageBoxA(NULL, tmp, "★デバッグ★", MB_OK);
		va_end(list);

	}

	//----------------------------------------------------------------------------------------------
	//
	void debug_out::delete_instance() {
		SafeDelete(logger_);
	}
}